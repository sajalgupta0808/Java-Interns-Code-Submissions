public class BinaryTree {

	public static void main(String[] args) {
	
		Node node = new Node(2);
		node.left = new Node(1);
		node.right = new Node(3);

	}
	
	static class Node{
		
		int a;
		
		Node left, right; 
		
		Node(int a){
			this.a = a;
			
			left = null;
			right =  null;
		}
	}

}

//PREORDER TRAVERSAL

class Node {
    int key;
    Node left, right;
 
    public Node(int item)
    {
        key = item;
        left = right = null;
    }
}
 
class BinaryTree {
    Node root;
 
    BinaryTree() { root = null; }
   
    void printPreorder(Node node)
    {
        if (node == null)
            return;
 
        System.out.print(node.key + " ");
 
        printPreorder(node.left);
 
        printPreorder(node.right);
    }
 
    void printPreorder() { printPreorder(root); }
 
    public static void main(String[] args)
    {
        BinaryTree tree = new BinaryTree();
        tree.root = new Node(1);
        tree.root.left = new Node(2);
        tree.root.right = new Node(3);
        tree.root.left.left = new Node(4);
        tree.root.left.right = new Node(5);
 
        System.out.println(
            "Preorder traversal of binary tree is ");
        tree.printPreorder();
    }
}

//POSTORDER TRAVERSAL

class Node {
	int key;
	Node left, right;

	public Node(int item)
	{
		key = item;
		left = right = null;
	}
}

class BinaryTree {
	Node root;

	BinaryTree() { root = null; }
	void printPostorder(Node node)
	{
		if (node == null)
			return;

		printPostorder(node.left);

		printPostorder(node.right);

		System.out.print(node.key + " ");
	}

	void printPostorder() { printPostorder(root); }

	public static void main(String[] args)
	{
		BinaryTree tree = new BinaryTree();
		tree.root = new Node(1);
		tree.root.left = new Node(2);
		tree.root.right = new Node(3);
		tree.root.left.left = new Node(4);
		tree.root.left.right = new Node(5);

		System.out.println(
			"\nPostorder traversal of binary tree is ");
		tree.printPostorder();
	}
}

